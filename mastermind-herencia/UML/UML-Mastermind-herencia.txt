@startuml
class Mastermind {
	-void play()
	-boolean resume()
	+{static}void main(String[] args)
}

class Game {
	~int MAX_ATTEMPS
	~int numberOfAttemps
	~Result[] results
	~Game()
	-void showState()
	-Result check(ProposedCombination proposedCombination)
	+void play()
}

class SecretCombination {
	~SecretCombination()
	-{static}String makeRandom()
	+int numberCoincidencesInColourAndPosition(ProposedCombination proposedCombination)
	+int numberCoincidencesInColourOnly(ProposedCombination proposedCombination)
	+void show()
}

class Result {
	~int numberOfBlacks
	~int numberOfWhites
	~Result(ProposedCombination proposedCombination, 
                int numberOfBlacks,int numberOfWhites)
	+boolean isWinner()
	+void show()
}

class Console {
	-{static}BufferedReader b
	+void out(String salida)
	+String readString(String mensaje)
	-void exit()
}

class ProposedCombination {
	~ProposedCombination()
	-{static}String proposeCombination()
	+void show()
}

abstract class Combination {
	#{static}int LENGHT
	#String colours
	~Combination(String colours)
	#{static}boolean isValidLength(String combination)
	#{static}boolean areValidColours(String combination)
	#{static}String validColours()
	#{static}int length()
	#{abstract}void show()
}

enum Colour {
	RED
	BLUE
	YELLOW
	GREEN
	ORANGE
	PINK
	colour
	~Colour(char colour)
	+{static}boolean isValid(char colour)
	+{static}String validColours()
}

Mastermind ..> Console
Mastermind *-down-> Game
Game -[hidden]down-> Combination
Game *-down-> SecretCombination
Game .down.> ProposedCombination
Game *-down-> "0..10" Result
Game ..> Console
Result .down.> Console
Combination -[hidden]right-> Result
Combination <|-down- SecretCombination
Combination <|-down- ProposedCombination
Combination -down-> Colour
SecretCombination .down..> Console
SecretCombination -down-> Colour
SecretCombination .right.> ProposedCombination
ProposedCombination *-down-> Result
ProposedCombination .down.> Console
@enduml